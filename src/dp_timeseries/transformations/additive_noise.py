import numpy as np
from gluonts.dataset.common import DataEntry
from gluonts.transform._base import SimpleTransformation


class AddGaussianNoise(SimpleTransformation):
    """Transform that adds Gaussian noise to time series.

    Attributes:
        target_field (None | str): Field with target values (array) of time series.
        observed_values_field (None | str): Field generated by AddObservedValuesIndicator.
        is_pad_field (None | str): Field generated by other transforms that pad
        standard_deviation (float): Univariate Gaussian standard deviation
        non_negative (bool): If True, clip to positive values.
    """

    def __init__(self,
                 target_field: None | str,
                 observed_values_field: None | str,
                 is_pad_field: None | str,
                 standard_deviation: float,
                 non_negative: bool = False) -> None:

        self.target_field = target_field
        self.observed_values_field = observed_values_field
        self.is_pad_field = is_pad_field
        self.standard_deviation = standard_deviation
        self.non_negative = non_negative

    def transform(self, data: DataEntry) -> DataEntry:
        targets = data[self.target_field]

        if (not isinstance(targets, np.ndarray)) or targets.dtype.kind != 'f':
            raise ValueError(f'data[{self.target_field}] must be float array')

        if self.observed_values_field is not None:
            observed = data[self.observed_values_field]
            if observed.dtype.kind != 'f' or np.any(observed != 1):
                raise NotImplementedError

        if self.is_pad_field is not None:
            is_pad = data[self.is_pad_field]
            if is_pad.dtype.kind != 'f' or np.any(is_pad != 0):
                raise NotImplementedError

        if self.non_negative and np.any(targets < 0):
            raise ValueError('Data must be non-negative for non-negative noise.')

        noisy_targets = np.random.normal(targets, self.standard_deviation).astype(targets.dtype)
        if self.non_negative:
            noisy_targets = np.maximum(noisy_targets, 0)

        data[self.target_field] = noisy_targets

        return data
